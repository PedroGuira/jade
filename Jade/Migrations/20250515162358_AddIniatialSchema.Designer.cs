// <auto-generated />
using System;
using Jade.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jade.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250515162358_AddIniatialSchema")]
    partial class AddIniatialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jade.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<int?>("MarcaFranquiaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("MarcaFranquiaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Jade.Models.CategoriaGrupoOpcao", b =>
                {
                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoOpcaoId")
                        .HasColumnType("int");

                    b.Property<int>("OrdemExibicaoGrupoNaCategoria")
                        .HasColumnType("int");

                    b.HasKey("CategoriaId", "GrupoOpcaoId");

                    b.HasIndex("GrupoOpcaoId");

                    b.ToTable("CategoriasGruposOpcao");
                });

            modelBuilder.Entity("Jade.Models.Estabelecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MarcaFranquiaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TelefoneWhatsapp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaFranquiaId");

                    b.ToTable("Estabelecimentos");
                });

            modelBuilder.Entity("Jade.Models.GrupoOpcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<int?>("MarcaFranquiaId")
                        .HasColumnType("int");

                    b.Property<int>("MaxSelecoes")
                        .HasColumnType("int");

                    b.Property<int>("MinSelecoes")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("MarcaFranquiaId");

                    b.ToTable("GruposOpcao");
                });

            modelBuilder.Entity("Jade.Models.ItemOpcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoOpcaoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoAdicional")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("GrupoOpcaoId");

                    b.ToTable("ItensOpcao");
                });

            modelBuilder.Entity("Jade.Models.LojaItemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AtivoNaLoja")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisponivelLocalmente")
                        .HasColumnType("bit");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<int>("ItemOriginalId")
                        .HasColumnType("int");

                    b.Property<string>("NomeLocal")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("PrecoLocal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoItem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId", "TipoItem", "ItemOriginalId")
                        .IsUnique();

                    b.ToTable("LojaItemConfiguracoes");
                });

            modelBuilder.Entity("Jade.Models.MarcaFranquia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("MarcasFranquia");
                });

            modelBuilder.Entity("Jade.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<string>("ImagemUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("MarcaFranquiaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("MarcaFranquiaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Jade.Models.UsuarioAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MarcaFranquiaIdVinculada")
                        .HasColumnType("int");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("MarcaFranquiaIdVinculada");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Jade.Models.Categoria", b =>
                {
                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("Categorias")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Jade.Models.MarcaFranquia", "MarcaFranquiaOriginadora")
                        .WithMany("CategoriasTemplateDaMarca")
                        .HasForeignKey("MarcaFranquiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Estabelecimento");

                    b.Navigation("MarcaFranquiaOriginadora");
                });

            modelBuilder.Entity("Jade.Models.CategoriaGrupoOpcao", b =>
                {
                    b.HasOne("Jade.Models.Categoria", "Categoria")
                        .WithMany("GruposDeOpcaoAssociados")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jade.Models.GrupoOpcao", "GrupoOpcao")
                        .WithMany("CategoriasAssociadas")
                        .HasForeignKey("GrupoOpcaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("GrupoOpcao");
                });

            modelBuilder.Entity("Jade.Models.Estabelecimento", b =>
                {
                    b.HasOne("Jade.Models.MarcaFranquia", "MarcaFranquia")
                        .WithMany("EstabelecimentosDaMarca")
                        .HasForeignKey("MarcaFranquiaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MarcaFranquia");
                });

            modelBuilder.Entity("Jade.Models.GrupoOpcao", b =>
                {
                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("GruposOpcao")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Jade.Models.MarcaFranquia", "MarcaFranquiaOriginadora")
                        .WithMany("GruposOpcaoTemplateDaMarca")
                        .HasForeignKey("MarcaFranquiaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Estabelecimento");

                    b.Navigation("MarcaFranquiaOriginadora");
                });

            modelBuilder.Entity("Jade.Models.ItemOpcao", b =>
                {
                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("ItensOpcao")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Jade.Models.GrupoOpcao", "GrupoOpcao")
                        .WithMany("ItensOpcao")
                        .HasForeignKey("GrupoOpcaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecimento");

                    b.Navigation("GrupoOpcao");
                });

            modelBuilder.Entity("Jade.Models.LojaItemConfig", b =>
                {
                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("LojaItemConfiguracoes")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("Jade.Models.Produto", b =>
                {
                    b.HasOne("Jade.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("Produtos")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Jade.Models.MarcaFranquia", "MarcaFranquiaOriginadora")
                        .WithMany("ProdutosTemplateDaMarca")
                        .HasForeignKey("MarcaFranquiaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Categoria");

                    b.Navigation("Estabelecimento");

                    b.Navigation("MarcaFranquiaOriginadora");
                });

            modelBuilder.Entity("Jade.Models.UsuarioAdmin", b =>
                {
                    b.HasOne("Jade.Models.Estabelecimento", "Estabelecimento")
                        .WithMany("UsuariosAdmin")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Jade.Models.MarcaFranquia", "MarcaFranquiaVinculada")
                        .WithMany("AdministradoresDaMarca")
                        .HasForeignKey("MarcaFranquiaIdVinculada")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Estabelecimento");

                    b.Navigation("MarcaFranquiaVinculada");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Jade.Models.UsuarioAdmin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Jade.Models.UsuarioAdmin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jade.Models.UsuarioAdmin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Jade.Models.UsuarioAdmin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jade.Models.Categoria", b =>
                {
                    b.Navigation("GruposDeOpcaoAssociados");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Jade.Models.Estabelecimento", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("GruposOpcao");

                    b.Navigation("ItensOpcao");

                    b.Navigation("LojaItemConfiguracoes");

                    b.Navigation("Produtos");

                    b.Navigation("UsuariosAdmin");
                });

            modelBuilder.Entity("Jade.Models.GrupoOpcao", b =>
                {
                    b.Navigation("CategoriasAssociadas");

                    b.Navigation("ItensOpcao");
                });

            modelBuilder.Entity("Jade.Models.MarcaFranquia", b =>
                {
                    b.Navigation("AdministradoresDaMarca");

                    b.Navigation("CategoriasTemplateDaMarca");

                    b.Navigation("EstabelecimentosDaMarca");

                    b.Navigation("GruposOpcaoTemplateDaMarca");

                    b.Navigation("ProdutosTemplateDaMarca");
                });
#pragma warning restore 612, 618
        }
    }
}
